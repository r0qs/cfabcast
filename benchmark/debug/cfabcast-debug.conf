include "application"

akka {
  # To turn off logging
  #stdout-loglevel = "OFF"
  #loglevel = "OFF"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"
  log-dead-letters = off
  log-dead-letters-during-shutdown = off
  # Need to enable all logs in logback config
  log-config-on-start = off

  actor {
    serialize-messages = off
  }

  remote {
    log-sent-messages = on
    log-received-messages = on
    log-remote-lifecycle-events = on
  }

  cluster {
    roles = [cfabcast]

    # Set seed node in a enviromment variable
    seed-nodes = [
      "akka.tcp://CFABCastSystem@127.0.1.1:2551",
      "akka.tcp://CFABCastSystem@127.0.1.2:2552",
      "akka.tcp://CFABCastSystem@127.0.1.3:2553"
    ]

    auto-down-unreachable-after = 2s
  }
}

cfabcast {
  # Minimum required number of replicas before start computation
  min-nr-of-nodes = 3
  
  node-id = ""

  # Determines the size of the Quorum of Acceptors
  # (nr-of-acceptors / 2) + 1
  quorum-size = 2

  # Select one of different kinds of deliveries. The options are:
  # "conservative" : only deliver the value map when vmap is complete(all values have a quorum)
  # "optimistic": deliver each single map when possible(each value have a quorum)
  # "super-optimistic": deliver the single map when become aware of it (no quorum)
  delivery-policy = "optimistic"

  role {
    # Minimum required number of agents of a certain role before start the protocol
    # E.g. to require 2 agents with role 'cfproposer':
    #   cfproposer.min-nr-of-agents = 2
    #
    #<role-name>.min-nr-of-agents = 1
    
    # 1 == classic paxos
      cfproposer {
        random = false
        min-nr-of-agents = 1
        ids = [p1]
      }
    }

  nodes {
    # Per node configuration  
    node1 {
      hostname = "127.0.1.1"
      port = 2551
      roles = [proposer, acceptor, learner]
      # Number of agents that play a certain role in this node.
      # E.g. to specify a node that play the role of 1 proposer and 1 learner:
      #  proposer.nr-of-agents  = 1
      #  acceptor.nr-of-agents  = 0
      #  learner.nr-of-agents   = 1
      proposer {
        nr-of-agents  = 1
        proposer1.id = "p1"
      }

      learner {
        nr-of-agents   = 1
        learner1.id = "l1"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor1.id = "a1"
      }
    }
  
    node2 {
      hostname = "127.0.1.2"
      port = 2552
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer2.id = "p2"
      }

      learner {
        nr-of-agents   = 1
        learner2.id = "l2"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor2.id = "a2"
      }
    }
  
    node3 {
      hostname = "127.0.1.3"
      port = 2553
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer3.id = "p3"
      }

      learner {
        nr-of-agents   = 1
        learner3.id = "l3"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor3.id = "a3"
      }
    }
    node4 {
      hostname = "127.0.1.4"
      port = 2554
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer4.id = "p4"
      }

      learner {
        nr-of-agents   = 1
        learner4.id = "l4"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor4.id = "a4"
      }
    }
    node5 {
      hostname = "127.0.1.5"
      port = 2555
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer5.id = "p5"
      }

      learner {
        nr-of-agents   = 1
        learner5.id = "l5"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor5.id = "a5"
      }
    }
    node6 {
      hostname = "127.0.1.6"
      port = 2556
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer6.id = "p6"
      }

      learner {
        nr-of-agents   = 1
        learner6.id = "l6"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor6.id = "a6"
      }
    }
    node7 {
      hostname = "127.0.1.7"
      port = 2557
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer7.id = "p7"
      }

      learner {
        nr-of-agents   = 1
        learner7.id = "l7"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor7.id = "a7"
      }
    }
    node8 {
      hostname = "127.0.1.8"
      port = 2558
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer8.id = "p8"
      }

      learner {
        nr-of-agents   = 1
        learner8.id = "l8"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor8.id = "a8"
      }
    }
    node9 {
      hostname = "127.0.1.9"
      port = 2559
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer9.id = "p9"
      }

      learner {
        nr-of-agents   = 1
        learner9.id = "l9"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor9.id = "a9"
      }
    }
    node10 {
      hostname = "127.0.1.10"
      port = 2560
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer10.id = "p10"
      }

      learner {
        nr-of-agents   = 1
        learner10.id = "l10"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor10.id = "a10"
      }
    }
  }
}
